version: "3.3"

services:
  api:
    restart: always
    build:
      context: .
      dockerfile: ./docker/local/express/Dockerfile
    volumes:
      - /app/node_modules
      - .:/app
      - uploads:/app/uploads
    depends_on:
      - mongodb
#    ports:
#      - "1997:1997"
    environment:
      NODE_ENV: ${NODE_ENV}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb
      FORCE_COLOR: 1
    networks:
      - plateverify

  client:
    build:
      context: ./client
      dockerfile: ./docker/local/Dockerfile
    restart: on-failure
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - plateverify

  mongodb:
    image: mongo:5.0.15-focal
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb-data:/data/db
    networks:
      - plateverify

  mongo-express:
    image: mongo-express:0.54.0
    depends_on:
      - mongodb
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123456
    networks:
      - plateverify

  mailhog:
    image: mailhog/mailhog:v1.0.0
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - plateverify

  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - pdf_volume:/app/docs
      - uploads:/app/uploads
    networks:
      - plateverify


networks:
  plateverify:
    driver: bridge

volumes:
  mongodb-data:
  static_volume:
  pdf_volume:
  uploads:
